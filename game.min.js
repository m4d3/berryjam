var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var kongregate;
var GravityGrid;
(function (GravityGrid) {
    "use strict";
    var GameState = (function (_super) {
        __extends(GameState, _super);
        function GameState() {
            _super.apply(this, arguments);
            this.normalMode = false;
            this.menuActive = true;
            this.dir = 0;
            this.canRotate = false;
            this.moveTiles = true;
            this.rotated = false;
            this.score = 0;
            this.scoreMulti = 0;
            this.scoreAccum = 0;
            this.stageRotation = 0;
            this.newTileAmount = 1;
            this.offsetX = 400;
            this.offsetY = 280;
            this.rotDir = {
                left: 0,
                right: 1,
                top: 2
            };
            this.numRotations = 0;
            this.dropTweenSpeed = 500;
            this.secondDrop = true;
        }
        GameState.prototype.create = function () {
            this.menu = new GravityGrid.MainMenu(this.game, this);
            this.game.add.existing(this.menu);
        };

        GameState.prototype.initGame = function () {
            this.newTileAmount = 1;

            this.game.add.sprite(0, 0, "background");

            this.scoreText = this.game.add.bitmapText(this.game.world.centerX - 50, 465, "Amatic", "Score: 0", 64);
            this.scoreAddText = this.game.add.bitmapText(350, 450, "Amatic", "+3", 55);
            this.scoreAddText.alpha = 0;

            this.newTiles = this.game.add.group();
            this.backgroundGrid = this.game.add.sprite(this.game.world.centerX, 265, "grid");
            this.gridObjects = this.game.add.group();

            this.gridObjects.pivot.set(132, 132);
            this.gridObjects.x = this.game.world.centerX;
            this.gridObjects.y = this.offsetY;

            this.backgroundGrid.anchor.setTo(0.5, 0.5);
            this.backgroundGrid.x = this.game.world.centerX;
            this.backgroundGrid.y = this.offsetY;

            this.newTiles.x = this.game.world.centerX - 130;
            this.newTiles.y = 50;

            this.gridData = [
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]];

            this.game.world.bringToTop(this.newTiles);
            this.game.world.bringToTop(this.gridObjects);
            this.game.world.bringToTop(this.scoreAddText);

            this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
            this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
            this.upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);

            this.leftKey.onDown.add(function () {
                this.rotateGrid(this.rotDir.left);
            }, this);

            this.rightKey.onDown.add(function () {
                this.rotateGrid(this.rotDir.right);
            }, this);

            this.upKey.onDown.add(function () {
                this.rotateGrid(this.rotDir.up);
            }, this);

            this.game.add.button(this.game.world.centerX + 185, 466, "buttonRight", function () {
                this.rotateGrid(this.rotDir.right);
            }, this);

            this.game.add.button(this.game.world.centerX - 310, 466, "buttonLeft", function () {
                this.rotateGrid(this.rotDir.left);
            }, this);

            this.game.add.button(this.game.world.centerX - 65, 532, "buttonFull", function () {
                this.rotateGrid(this.rotDir.up);
            }, this);

            this.game.add.button(10, 20, "buttonMenu", function () {
                this.game.world.bringToTop(this.menu);
                this.menuActive = true;
                this.menu.showResume();
            }, this);

            this.gameOver = this.game.add.sprite(0, 0, "gameOver");
            this.gameOver.kill();
            this.gameOver.alpha = 0;

            this.yeahSound = new Phaser.Sound(this.game, "yeah");
            this.yeahSound2 = new Phaser.Sound(this.game, "yeah2");

            this.soundOnButton = this.game.add.button(600, 20, "soundOffButton", function () {
                this.game.sound.mute = false;
                this.soundOffButton.revive();
                this.soundOnButton.kill();
            }, this);
            this.soundOnButton.kill();

            this.soundOffButton = this.game.add.button(600, 20, "soundOnButton", function () {
                this.game.sound.mute = true;
                this.soundOffButton.kill();
                this.soundOnButton.revive();
            }, this);
        };

        GameState.prototype.startGame = function () {
            this.dir = 0;
            this.stageRotation = 0;
            this.score = 0;
            this.scoreAccum = 0;
            this.scoreMulti = 0;

            this.menuActive = false;
            this.game.world.sendToBack(this.menu);
            this.initGame();

            this.fillRow();
            this.pushToGrid();
            this.fillRandom();

            this.dropTweenType = Phaser.Easing.Bounce.Out;
            this.tick();
        };

        GameState.prototype.setLost = function () {
            submitScore(this.score);
            this.gameOver.revive();
            this.game.add.tween(this.gameOver).to({ alpha: 1 }, 700, Phaser.Easing.Linear.None, true);
            this.gameOverText = this.game.add.bitmapText(250, 250, "Amatic", "Your Score is: " + this.score, 65);
            this.gameOverText.alpha = 0;
            this.game.add.tween(this.gameOverText).to({ alpha: 1 }, 700, Phaser.Easing.Linear.None, true);
            this.game.add.button(this.game.world.centerX - 89, 370, "playButton", function () {
                this.game.world.bringToTop(this.menu);
                this.menuActive = true;
                this.menu.selectMode(this.game);
            }, this);
        };

        function submitScore(score) {
            if (!kongregate.services.isGuest()) {
                kongregate.stats.submit("Score", score);
            }
        }

        GameState.prototype.fillRow = function () {
            for (var x = 0; x !== 5; x++) {
                this.addPrevTile(x);
            }
        };

        GameState.prototype.fillRandom = function () {
            var lastRandom = 0;

            for (var x = 0; x !== this.newTileAmount; x++) {
                var randomTile = this.randomIntFromInterval(0, 4);
                while (randomTile === lastRandom) {
                    randomTile = this.randomIntFromInterval(0, 4);
                }
                lastRandom = randomTile;

                this.addPrevTile(randomTile);
            }
        };

        GameState.prototype.fillPrevTiles = function () {
            if (this.newTileAmount < 5) {
                this.fillRandom();
            } else {
                this.fillRow();
            }
        };

        GameState.prototype.pushToGrid = function () {
            this.newTiles.forEachAlive(function (tile) {
                if (this.dir === 0 && this.gridData[0][tile.xPos] === 0) {
                    this.addTile(tile.xPos, 0, tile.color, tile.lifes);
                    this.gridData[0][tile.xPos] = tile.color;
                    tile.kill();
                } else if (this.dir === 1 && this.gridData[4 - tile.xPos][0] === 0) {
                    this.addTile(0, 4 - tile.xPos, tile.color, tile.lifes);
                    this.gridData[4 - tile.xPos][0] = tile.color;
                    tile.kill();
                } else if (this.dir === 2 && this.gridData[4][4 - tile.xPos] === 0) {
                    this.addTile(4 - tile.xPos, 4, tile.color, tile.lifes);
                    this.gridData[4][4 - tile.xPos] = tile.color;
                    tile.kill();
                } else if (this.dir === 3 && this.gridData[tile.xPos][4] === 0) {
                    this.addTile(4, tile.xPos, tile.color, tile.lifes);
                    this.gridData[tile.xPos][4] = tile.color;
                    tile.kill();
                }
            }, this);
        };

        GameState.prototype.addPrevTile = function (xPos) {
            var addNew = true;

            this.newTiles.forEachAlive(function (tile) {
                if (xPos === tile.xPos) {
                    addNew = false;
                }
            }, this);

            if (addNew) {
                var tile = this.newTiles.getFirstDead();
                if (tile === null) {
                    tile = new GravityGrid.Tile(this.game, 0, 0, 1);
                    this.newTiles.add(tile);
                }
                tile.revive();
                tile.xPos = xPos;
                tile.position.setTo(xPos * 66, 0);
                tile.setColor(this.randomIntFromInterval(1, 3));
                tile.alpha = 0;

                if (Math.random() < 0.1) {
                    tile.color = -1;
                    tile.lifes = 5;
                } else {
                    tile.lifes = 0;
                }
                this.game.add.tween(tile).to({ alpha: 1 }, 300, Phaser.Easing.Back.InOut, true);
            }
        };

        GameState.prototype.addTile = function (x, y, color, lifes) {
            var tile = this.gridObjects.getFirstDead();
            if (tile === null) {
                tile = new GravityGrid.Tile(this.game, 0, 0, 1);
                this.gridObjects.add(tile);
            }
            tile.rotation = -this.stageRotation;
            tile.lifes = lifes;
            tile.setData(x, y);
            tile.setColor(color);
        };

        GameState.prototype.rotateGrid = function (dir) {
            if (this.canRotate && !this.menuActive) {
                this.canRotate = false;
                this.rotated = true;
                this.numRotations++;

                this.dropTweenType = Phaser.Easing.Quadratic.Out;
                this.dropTweenSpeed = 350;
                this.pushToGrid();
                this.secondDrop = false;
                this.tick();

                var timing = this.checkDirection(dir);

                switch (this.dir) {
                    case 0:
                        this.gridObjects.sort("yPos", Phaser.Group.SORT_DESCENDING);
                        break;
                    case 1:
                        this.gridObjects.sort("xPos", Phaser.Group.SORT_DESCENDING);
                        break;
                    case 2:
                        this.gridObjects.sort("yPos", Phaser.Group.SORT_ASCENDING);
                        break;
                    case 3:
                        this.gridObjects.sort("xPos", Phaser.Group.SORT_ASCENDING);
                        break;
                }

                var tween = this.game.add.tween(this.gridObjects);
                tween.to({ rotation: this.stageRotation }, timing, Phaser.Easing.Back.InOut);
                tween.onComplete.addOnce(function () {
                    this.dropTweenType = Phaser.Easing.Bounce.Out;
                    this.dropTweenSpeed = 500;
                    this.secondDrop = true;
                    this.tick();
                }, this);
                tween.start();

                var tween2 = this.game.add.tween(this.backgroundGrid);
                tween2.to({ rotation: this.stageRotation }, timing, Phaser.Easing.Back.InOut);
                tween2.start();

                this.gridObjects.forEach(function (tile) {
                    var tween = this.game.add.tween(tile);
                    tween.to({ rotation: -this.stageRotation }, timing, Phaser.Easing.Exponential.InOut);
                    tween.start();

                    if (tile.color === 4) {
                        tile.lifes--;
                        if (tile.lifes <= 0) {
                            this.gridData[tile.yPos][tile.xPos] = 0;
                            tile.kill();
                        } else if (tile.lifes < 5) {
                            tile.alpha -= 0.15;
                        }
                    }
                }, this);

                if (!this.normalMode) {
                    this.fillPrevTiles();
                }
            }
        };

        GameState.prototype.checkDirection = function (dir) {
            var timing = 500;
            if (dir === this.rotDir.right) {
                if (this.dir < 3) {
                    this.dir++;
                } else {
                    this.dir = 0;
                }
                this.stageRotation = this.gridObjects.rotation + Math.PI / 2;
            } else if (dir === this.rotDir.left) {
                if (this.dir > 0) {
                    this.dir--;
                } else {
                    this.dir = 3;
                }
                this.stageRotation = this.gridObjects.rotation - Math.PI / 2;
            } else {
                this.dir++;
                if (this.dir > 3) {
                    this.dir = 0;
                }
                this.dir++;
                if (this.dir > 3) {
                    this.dir = 0;
                }
                this.stageRotation = this.gridObjects.rotation - Math.PI;
                timing = 800;
            }
            return timing;
        };

        GameState.prototype.tick = function () {
            var tileAmount = 0;
            this.moveTiles = false;

            this.gridObjects.forEachAlive(function (tile) {
                tileAmount++;
                if (tile.color !== 4) {
                    this.dropTween = this.game.add.tween(tile);
                    var newPos = -1;
                    switch (this.dir) {
                        case 0:
                            for (var y = tile.yPos + 1; y < 5; y++) {
                                if (this.gridData[y][tile.xPos] === 0) {
                                    newPos = y;
                                } else {
                                    break;
                                }
                            }
                            if (newPos !== -1) {
                                this.gridData[tile.yPos][tile.xPos] = 0;
                                tile.yPos = newPos;
                                this.gridData[tile.yPos][tile.xPos] = tile.color;
                                this.dropTween.to({ y: newPos * 66 }, this.dropTweenSpeed, this.dropTweenType);
                            }
                            break;
                        case 1:
                            for (var x = tile.xPos + 1; x < 5; x++) {
                                if (this.gridData[tile.yPos][x] === 0) {
                                    newPos = x;
                                } else {
                                    break;
                                }
                            }
                            if (newPos !== -1) {
                                this.gridData[tile.yPos][tile.xPos] = 0;
                                tile.xPos = newPos;
                                this.gridData[tile.yPos][tile.xPos] = tile.color;
                                this.dropTween.to({ x: newPos * 66 }, this.dropTweenSpeed, this.dropTweenType);
                            }
                            break;
                        case 2:
                            for (var y = tile.yPos - 1; y > -1; y--) {
                                if (this.gridData[y][tile.xPos] === 0) {
                                    newPos = y;
                                } else {
                                    break;
                                }
                            }
                            if (newPos !== -1) {
                                this.gridData[tile.yPos][tile.xPos] = 0;
                                tile.yPos = newPos;
                                this.gridData[tile.yPos][tile.xPos] = tile.color;
                                this.dropTween.to({ y: newPos * 66 }, this.dropTweenSpeed, this.dropTweenType);
                            }
                            break;
                        case 3:
                            for (var x = tile.xPos - 1; x > -1; x--) {
                                if (this.gridData[tile.yPos][x] === 0) {
                                    newPos = x;
                                } else {
                                    break;
                                }
                            }
                            if (newPos !== -1) {
                                this.gridData[tile.yPos][tile.xPos] = 0;
                                tile.xPos = newPos;
                                this.gridData[tile.yPos][tile.xPos] = tile.color;
                                this.dropTween.to({ x: newPos * 66 }, this.dropTweenSpeed, this.dropTweenType);
                            }
                            break;
                    }

                    this.dropTween.start();
                    if (tile.color === -1 && !this.moveTiles) {
                        tile.color = 4;
                    }
                }
            }, this);

            if (tileAmount === 25) {
                this.setLost();
            } else if (this.secondDrop) {
                this.dropTween.onComplete.addOnce(this.checkMatch, this);
            }
        };

        GameState.prototype.checkMatch = function () {
            this.scoreAccum = 0;

            this.gridObjects.forEachAlive(function (tile) {
                if (tile.color !== 4 && tile.color !== -1) {
                    if (tile.xPos < 3) {
                        if (this.gridData[tile.yPos][tile.xPos + 1] === tile.color && this.gridData[tile.yPos][tile.xPos + 2] === tile.color) {
                            tile.markKill();
                        }
                    }
                    if (tile.xPos > 0 && tile.xPos < 4) {
                        if (this.gridData[tile.yPos][tile.xPos - 1] === tile.color && this.gridData[tile.yPos][tile.xPos + 1] === tile.color) {
                            tile.markKill();
                            this.scoreAddText.x = tile.world.x;
                            this.scoreAddText.y = tile.world.y;
                        }
                    }
                    if (tile.xPos > 1) {
                        if (this.gridData[tile.yPos][tile.xPos - 1] === tile.color && this.gridData[tile.yPos][tile.xPos - 2] === tile.color) {
                            tile.markKill();
                        }
                    }
                    if (tile.yPos < 3) {
                        if (this.gridData[tile.yPos + 1][tile.xPos] === tile.color && this.gridData[tile.yPos + 2][tile.xPos] === tile.color) {
                            tile.markKill();
                        }
                    }
                    if (tile.yPos > 0 && tile.yPos < 4) {
                        if (this.gridData[tile.yPos - 1][tile.xPos] === tile.color && this.gridData[tile.yPos + 1][tile.xPos] === tile.color) {
                            tile.markKill();
                            this.scoreAddText.x = tile.world.x;
                            this.scoreAddText.y = tile.world.y;
                        }
                    }
                    if (tile.yPos > 1) {
                        if (this.gridData[tile.yPos - 1][tile.xPos] === tile.color && this.gridData[tile.yPos - 2][tile.xPos] === tile.color) {
                            tile.markKill();
                        }
                    }
                }
            }, this);

            this.gridObjects.forEachAlive(function (tile) {
                if (tile.clearData) {
                    this.gridData[tile.yPos][tile.xPos] = 0;
                    tile.clearData = false;
                    if (tile.color !== -1) {
                        if (tile.color !== 4) {
                            if (this.scoreAccum >= 3) {
                                this.scoreAccum += 2;
                            } else {
                                this.scoreAccum++;
                            }
                        } else {
                            tile.kill();
                        }
                    }
                }
            }, this);

            var addAmount = this.score / 50;
            if (this.newTileAmount < 5) {
                this.newTileAmount = 1 + Math.floor(addAmount);
            }

            if (this.scoreAccum > 2) {
                this.game.time.events.add(400, this.tick, this);
                this.setScore();
                if (Math.random() < 0.5) {
                    this.yeahSound.play();
                } else {
                    this.yeahSound2.play();
                }
            } else {
                this.scoreAccum = 0;
                this.scoreMulti = 0;
                this.canRotate = true;
            }
        };

        GameState.prototype.setScore = function () {
            this.scoreAddText.alpha = 1;
            this.scoreAddText.setText("+" + (this.scoreAccum + this.scoreMulti));
            var scoreAddFade = this.game.add.tween(this.scoreAddText).to({ "alpha": 0, "y": (this.scoreAddText.y - 25) }, 750);
            scoreAddFade.start();
            this.score += this.scoreAccum + this.scoreMulti;
            this.scoreText.setText("Score: " + this.score);
            this.scoreMulti += 2;
        };

        GameState.prototype.randomIntFromInterval = function (min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        };
        return GameState;
    })(Phaser.State);
    GravityGrid.GameState = GameState;

    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            _super.call(this, 700, 600, Phaser.AUTO, "content", null);

            this.state.add("Boot", Boot, false);
            this.state.add("Preloader", Preloader, false);
            this.state.add("GameState", GravityGrid.GameState, false);
            this.state.start("Boot");
        }
        return Game;
    })(Phaser.Game);
    GravityGrid.Game = Game;

    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            _super.apply(this, arguments);
        }
        Boot.prototype.preload = function () {
            this.game.stage.backgroundColor = "#FFFFFF";
            this.load.image("preloadBar", "assets/interface/marmelade.png");
            this.load.image("loadOverlay", "assets/interface/glas.png");
            this.load.onLoadComplete.add(function () {
                this.game.state.start("Preloader", true, false);
            }, this);
            this.load.start();
        };

        Boot.prototype.create = function () {
            this.input.maxPointers = 1;

            if (this.game.device.desktop) {
            } else {
            }

            this.game.state.start("Preloader", true, false);
        };
        return Boot;
    })(Phaser.State);

    var Preloader = (function (_super) {
        __extends(Preloader, _super);
        function Preloader() {
            _super.apply(this, arguments);
        }
        Preloader.prototype.preload = function () {
            this.add.sprite(this.game.world.centerX - 80, 250, "loadOverlay");

            this.preloadBar = this.add.sprite(this.game.world.centerX - 80, 250, "preloadBar");
            this.load.setPreloadSprite(this.preloadBar, 1);
            this.preloadBar.scale.y *= -1;
            this.preloadBar.y = 441;

            this.load.image("titleBack", "assets/interface/titleBack.jpg");
            this.load.image("title", "assets/interface/title.png");
            this.load.image("logo", "assets/interface/logo.png");
            this.load.image("playButton", "assets/interface/play.png");
            this.load.image("controlsButton", "assets/interface/controls.png");
            this.load.image("controlScreen", "assets/interface/controlScreen.jpg");
            this.load.image("backButton", "assets/interface/back.jpg");
            this.load.image("resumeButton", "assets/interface/resume.png");
            this.load.image("restartButton", "assets/interface/restart.png");
            this.load.image("soundOnButton", "assets/interface/Sound_On.png");
            this.load.image("soundOffButton", "assets/interface/Sound_Off.png");

            this.load.image("buttonMenu", "assets/interface/menu.jpg");
            this.load.image("buttonLeft", "assets/interface/rotateLeft.png");
            this.load.image("buttonRight", "assets/interface/rotateRight.png");
            this.load.image("buttonFull", "assets/interface/rotateFull.png");
            this.load.image("grid", "assets/grid.jpg");
            this.load.image("background", "assets/background.jpg");
            this.load.image("himbeer", "assets/himbeer.png");
            this.load.image("blaubeer", "assets/blaubeer.png");
            this.load.image("stachelbeer", "assets/stachelbeer.png");
            this.load.image("himbeer_l", "assets/himbeer_lach.png");
            this.load.image("blaubeer_l", "assets/blaubeer_lach.png");
            this.load.image("stachelbeer_l", "assets/stachelbeer_lach.png");
            this.load.image("rotten", "assets/rotten.png");
            this.load.image("gameOver", "assets/gameOver.jpg");

            this.load.audio("yeah", "assets/sound/yeah.mp3");
            this.load.audio("yeah2", "assets/sound/yeah2.mp3");

            this.load.bitmapFont("Amatic", "assets/interface/Amatic_0.png", "assets/interface/Amatic.xml");

            this.load.onLoadComplete.add(function () {
                this.game.state.start("GameState", true, false);
            }, this);

            this.load.start();
        };
        return Preloader;
    })(Phaser.State);

    var MainMenu = (function (_super) {
        __extends(MainMenu, _super);
        function MainMenu(game, gameState) {
            _super.call(this, game);

            this.background = game.add.sprite(0, 0, "titleBack");
            this.background.alpha = 0;

            this.title = game.add.sprite(0, -100, "title");
            this.title.alpha = 0;

            this.logo = game.add.sprite(0, 0, "logo");
            this.logo.anchor.setTo(0.5, 0.5);
            this.logo.position.setTo(game.world.centerX, 400);
            this.logo.scale.setTo(1.5, 1.5);
            this.logo.alpha = 0;

            this.backButton = game.add.button(game.world.centerX - 75, 535, "backButton", function () {
                game.add.tween(this.controlScreen).to({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true);
                this.backButton.kill();
            }, this);
            this.backButton.kill();

            this.playButton = game.add.button(-200, 520, "playButton", function () {
                game.world.sendToBack(this);
                gameState.menuActive = false;
                gameState.startGame();
            }, this);

            this.resumeButton = game.add.button(70, 520, "resumeButton", function () {
                game.world.sendToBack(this);
                gameState.menuActive = false;
            }, this);
            this.resumeButton.kill();

            this.restartButton = game.add.button(270, 520, "restartButton", function () {
                game.world.sendToBack(this);
                gameState.menuActive = false;
                gameState.startGame();
            }, this);
            this.restartButton.kill();

            this.controlsButton = game.add.button(game.world.width + 200, 520, "controlsButton", function () {
                game.add.tween(this.controlScreen).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true);
                this.backButton.revive();
            }, this);

            this.controlScreen = game.add.sprite(0, 0, "controlScreen");
            this.controlScreen.alpha = 0;
            this.controlScreen.addChild(this.backButton);

            var backTween = game.add.tween(this.background).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true);
            backTween.onComplete.add(function () {
                var titleTween = game.add.tween(this.title).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true);
                game.add.tween(this.title).to({ y: 150 }, 500, Phaser.Easing.Quadratic.In, true);
                titleTween.onComplete.add(function () {
                    var logoTween = game.add.tween(this.logo.scale).to({ x: 1, y: 1 }, 750, Phaser.Easing.Bounce.Out, true);
                    game.add.tween(this.logo).to({ alpha: 1 }, 500, Phaser.Easing.Linear.None, true);
                    logoTween.onComplete.add(function () {
                        game.add.tween(this.playButton).to({ x: 150 }, 500, Phaser.Easing.Quadratic.In, true);
                        game.add.tween(this.controlsButton).to({ x: 400 }, 500, Phaser.Easing.Quadratic.In, true);
                    }, this);
                }, this);
            }, this);

            this.add(this.background);
            this.add(this.title);
            this.add(this.logo);
            this.add(this.playButton);
            this.add(this.resumeButton);
            this.add(this.restartButton);
            this.add(this.controlsButton);
            this.add(this.controlScreen);
        }
        MainMenu.prototype.showResume = function () {
            this.playButton.kill();
            this.controlsButton.x = 470;
            this.resumeButton.revive();
            this.restartButton.revive();
        };
        return MainMenu;
    })(Phaser.Group);
    GravityGrid.MainMenu = MainMenu;

    var Tile = (function (_super) {
        __extends(Tile, _super);
        function Tile(game, x, y, colorType) {
            _super.call(this, game, -100, -100, "tile");
            this.color = 0;
            this.clearData = false;
            this.lifes = 0;
            this.game = game;
            this.anchor.setTo(0.5, 0.5);

            this.destroyTween = this.game.add.tween(this);
            this.destroyTween.onComplete.add(this.kill, this);
            this.destroyTween.to({ alpha: 0 }, 350, Phaser.Easing.Back.InOut);

            game.add.existing(this);
        }
        Tile.prototype.setData = function (x, y) {
            this.xPos = x;
            this.yPos = y;

            this.alpha = 1;
            this.scale.setTo(1, 1);
            this.destroyTween.stop();

            this.reset(x * 66, y * 66);
        };

        Tile.prototype.setColor = function (colorType) {
            if (colorType === 1) {
                this.loadTexture("himbeer", 0);
            } else if (colorType === 2) {
                this.loadTexture("blaubeer", 0);
            } else if (colorType === 3) {
                this.loadTexture("stachelbeer", 0);
            } else {
                this.loadTexture("rotten", 0);
            }
            this.color = colorType;
        };

        Tile.prototype.markKill = function () {
            if (this.color === 1) {
                this.loadTexture("himbeer_l", 0);
            } else if (this.color === 2) {
                this.loadTexture("blaubeer_l", 0);
            } else if (this.color === 3) {
                this.loadTexture("stachelbeer_l", 0);
            }
            this.clearData = true;
            this.game.add.tween(this.scale).to({ x: 0, y: 0 }, 350, Phaser.Easing.Back.InOut, true);
            this.destroyTween.start();
        };
        return Tile;
    })(Phaser.Sprite);
    GravityGrid.Tile = Tile;
})(GravityGrid || (GravityGrid = {}));

function onLoadCompleted() {
    // Get a global reference to the kongregate API
    kongregate = parent.kongregateAPI.getAPI();

    var params = "kongregate_user_id=" + kongregate.services.getUserId() +
              "&kongregate_game_auth_token=" + kongregate.services.getGameAuthToken();
}
parent.kongregateAPI.loadAPI(onLoadCompleted);
var game = new GravityGrid.Game();
//# sourceMappingURL=game.js.map
